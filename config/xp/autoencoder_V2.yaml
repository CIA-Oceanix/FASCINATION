# @package _global_

paths:
    sound: /Odyssey/public/enatl60/celerity/eNATL60_BLB002_sound_speed_regrid_0_1000m.nc
    #variables: /DATASET/envs/o23gauvr/tmp/eNATL60_BLB002_ECS_at_0_regrid_0_1000m.nc


normalization:
  min_max:
    x_min: null #1459.0439165829073
    x_max: null #1545.8698054910844
  mean_std:
    mean: null #1513.8417292146794 
    std: null #14.949060449731395 
  mean_std_along_depth:
    mean: null 
    std: null 



dtype: float32 #float16 #float64 

root_save_dir: /Odyssey/private/o23gauvr/code/FASCINATION/outputs #/DATASET/envs/o23gauvr/outputs #/homes/o23gauvr/Documents/thèse/code/FASCINATION/outputs

save_dir_name: test #channels_${model.model_hparams.channels_list}

model_architecture: AE_CNN

pooled_dim: depth #spatial #depth  #all #None 

patience: 5

trainer:
  _target_: pytorch_lightning.Trainer
  inference_mode: False
  accelerator: gpu
  devices: 1
  check_val_every_n_epoch: 1
  accumulate_grad_batches: 1
  logger: 
    _target_: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    save_dir: ${root_save_dir}/${save_dir_name}/AE/  #/DATASET/envs/o23gauvr/outputs/AE_V2/ #/homes/o23gauvr/Documents/thèse/code/FASCINATION/outputs/AE_V2/
    name: ${model.model_name}    #ecs_${model.loss_weight.ecs_weight}
    version: pred_${model.loss_weight.prediction_weight}_grad_${model.loss_weight.gradient_weight}_max_pos_${model.loss_weight.max_position_weight}_max_value_${model.loss_weight.max_value_weight}_fft_${model.loss_weight.fft_weight}_weighted_${model.loss_weight.weighted_weight}_inflection_pos_${model.loss_weight.min_max_position_weight}_inflection_value_${model.loss_weight.min_max_value_weight}/depth_pre_treatment_${datamodule.depth_pre_treatment.method}_n_components_${datamodule.depth_pre_treatment.params}_norm_on_${datamodule.depth_pre_treatment.norm_on}_train_on_${datamodule.depth_pre_treatment.train_on}/${model_config.save_dir.${model_architecture}}/lr_${model.opt_fn.lr}/normalization_${datamodule.norm_stats.method}/manage_nan_${datamodule.manage_nan}/n_profiles_${datamodule.n_profiles}/${now:%Y-%m-%d_%H-%M}
    log_graph : True

  max_epochs: 100

  callbacks:
    - _target_: pytorch_lightning.callbacks.LearningRateMonitor
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      monitor: val_loss
      save_top_k: 1
      filename: '{val_loss:.2f}-{epoch:02d}'
      mode: min
    - _target_: pytorch_lightning.callbacks.EarlyStopping
      monitor: val_loss
      verbose: True
      patience: ${trainer.max_epochs}
      min_delta: 1e-6
      #patience: ${patience}
    

      

datamodule:
  _target_: src.autoencoder_datamodule.AutoEncoderDatamodule_3D
  input_da: 
    _target_: src.utils.load_ssp_da
    ssf_da_path: ${paths.sound}
  dl_kw:
    batch_size: 4
    num_workers: 2
  norm_stats:
    method:  min_max #min_max #mean_std_along_depth #mean_std #mean_std_along_depth #mean_std  #min_max
    params: ${normalization.${datamodule.norm_stats.method}}
  manage_nan: suppress
  n_profiles: null #100000
  pooled_dim: ${pooled_dim} #spatial #depth  #all #None
  depth_pre_treatment: 
    method: pca #pca
    params: 10 #10 #none 
    norm_on: components #components #profiles
    train_on: components #components #profiles

  
  #pooled_dim: ${pooled_dim} #spatial #depth  #all
    
    #${model_config.depth_pre_treatment.${model_config.model_hparams.${model.model_name}.pooling_dim}.${datamodule.depth_pre_treatment.method}}

  dtype_str: ${dtype}  



model:
  _target_: src.autoencoder_V2.AutoEncoder
  model_name: ${model_architecture} #_3D
  model_hparams: ${model_config.model_hparams.${model.model_name}}
  opt_fn:
    _target_: src.utils.cosanneal_lr_adamw
    _partial_: true
    lr: 1e-3
    T_max: ${trainer.max_epochs} #${trainer.max_epochs} #${trainer.max_epochs} #100000
    weight_decay: 1e-3 #0 #1e-3
  loss_weight:
    prediction_weight: 1 #10 #0.5 #0.01 #1
    weighted_weight: 1 #100 
    gradient_weight: 1000 #1000000
    max_position_weight: 0 #0.01 
    max_value_weight: 0 #100 
    min_max_position_weight: 0 #0.01 
    min_max_value_weight: 0 #100 
    fft_weight: 0 #0.01
    ecs_weight: 0
  


model_config:


  model_hparams:
    # AE_CNN_3D: &AE_CNN_Default
    #   channels_list: [1,8,8,8] #[1,1,1,1] #[1,8,8,8] #[1,16,32,128,256,512] #[1,1] #[1,16,32,128,256,512]s
    #   n_conv_per_layer: 1
    #   padding: reflect
    #   interp_size: 0
    #   act_fn_str: Relu #Elu #Elu
    #   final_act_fn_str: Tanh #Linear #Linear #Linear
    #   final_upsample_str: upsample #upsample_pooling #upsample  #upsample_pooling
    #   upsample_mode: trilinear
    #   pooling: Max #Avg
    #   pooling_dim: ${pooled_dim} #spatial #depth  #all #None
    #   linear_layer: False
    #   latent_size: 50
    #   dropout_proba: 0
    #   dtype_str: ${dtype}

    AE_CNN:
      channels_list: [107, 70, 50]
      kernel_list: 3
      n_conv_per_layer: 2
      padding: 
        mode: cubic #"reflect" #linear #cubic
        interp_size: 5
      act_fn_str: "Relu"
      use_final_act_fn: True
      final_upsample_str: "upsample" #upsample #upsample_pooling
      upsample_mode: "trilinear" #nearest
      pooling: "Avg" #conv #Max #Avg
      pooling_dim: ${pooled_dim} #spatial #depth  #all #None
      dense: True
      linear_layer: 
        use: False
        cr: 100000
      dropout_proba: 0
      dtype_str: ${dtype}


  save_dir:
    AE_CNN: dense_${model.model_hparams.dense}/pooling_${model.model_hparams.pooling}_on_dim_${model.model_hparams.pooling_dim}/channels_${model.model_hparams.channels_list}/upsample_mode_${model.model_hparams.upsample_mode}/linear_layer_${model.model_hparams.linear_layer.use}/cr_${model.model_hparams.linear_layer.cr}/${model.model_hparams.n_conv_per_layer}_conv_per_layer/padding_${model.model_hparams.padding.mode}/interp_size_${model.model_hparams.padding.interp_size}/final_upsample_${model.model_hparams.final_upsample_str}/act_fn_${model.model_hparams.act_fn_str}/use_final_act_fn_${model.model_hparams.use_final_act_fn}  #_linear_layer_${model.model_hparams.linear_layer}_dropout_${model.model_hparams.dropout_proba}/


entrypoints:
  - _target_: pytorch_lightning.seed_everything
    seed: 333
  - _target_: src.train.base_training
    trainer: ${trainer}
    lit_mod: ${model}
    dm: ${datamodule}



hydra:
  run:
    dir: ${trainer.logger.save_dir}/${trainer.logger.name}/${trainer.logger.version} #/Odyssey/private/o23gauvr/code/FASCINATION 

  job:
    env_set: 
      CUDA_VISIBLE_DEVICES: 0
      
      #TORCH_USE_CUDA_DSA: 1

# torch:
#   backends:n
#     cudnn:
#       allow_tf32: False
