# @package _global_

paths:
    sound: /DATASET/eNATL/eNATL60_BLB002_sound_speed_regrid_0_1000m.nc
    variables: /DATASET/envs/o23gauvr/tmp/eNATL60_BLB002_ECS_at_0_regrid_0_1000m.nc

normalization:
  x_min: 1459.0439165829073
  x_max: 1545.8698054910844

dtype: float32 #float16 #float64 

trainer:
  _target_: pytorch_lightning.Trainer
  inference_mode: False
  accelerator: gpu
  devices: 1
  check_val_every_n_epoch: 1
  logger: 
    #_target_: pytorch_lightning.loggers.CSVLogger
    _target_: pytorch_lightning.loggers.tensorboard.TensorBoardLogger
    #save_dir: ${hydra:runtime.output_dir}
    save_dir: /homes/o23gauvr/Documents/th√®se/code/FASCINATION/outputs/accoustic_predictor/
    #name: ${hydra:runtime.choices.xp}
    name: ${model.arch_shape}
    #version: ${now:%Y-%m-%d_%H-%M}
    version: pred_weight_${model.pred_weight}_classif_weight_${model.classif_weight}_${now:%Y-%m-%d_%H-%M}

  min_epochs: 0
  max_epochs: 1000
  callbacks:
    - _target_: pytorch_lightning.callbacks.LearningRateMonitor
    - _target_: pytorch_lightning.callbacks.ModelCheckpoint
      monitor: val_loss
      save_top_k: 1
      filename: '{val_loss:.2f}-{epoch:02d}'
      mode: min
    - _target_: pytorch_lightning.callbacks.EarlyStopping
      monitor: val_loss
      min_delta: 1.0e-6
      check_on_train_epoch_end: True
      verbose: True
      patience: 5

      

datamodule:
  _target_: src.data.BaseDatamodule
  input_da: 
    _target_: src.utils.load_ssf_ecs_da
    path1: ${paths.sound}
    path2: ${paths.variables}
  dl_kw: {batch_size: 4, num_workers: 4}
  x_min: ${normalization.x_min}
  x_max: ${normalization.x_max}
  dtype_str: ${dtype}  

model:
  _target_: src.acoustic_predictor.AcousticPredictor
  input_depth: 107
  acoustic_variables: 1
  lr: 0.001
  T_max: 10
  classif_weight: 0
  pred_weight: 1
  kernel_size: 8
  arch_shape: 'dense_2D_CNN_ReLu'
  dtype_str: ${dtype}  

  




entrypoints:
  - _target_: pytorch_lightning.seed_everything
    seed: 333
  - _target_: src.train.base_training
    trainer: ${trainer}
    lit_mod: ${model}
    dm: ${datamodule}


hydra:
  run:
    dir: ${trainer.logger.save_dir}/${trainer.logger.name}/${trainer.logger.version}

# torch:
#   backends:
#     cudnn:
#       allow_tf32: False